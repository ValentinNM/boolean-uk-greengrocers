Description
In this exercise we explore a common scenario in eCommerce, adding and removing items from the cart, and calculating the total.

Deliverables
- A user can view a selection of items in the store
- From the store, a user can add an item to their cart
- From the cart, a user can view and adjust the number of items in their cart
    - If an item's quantity equals zero it is removed from the cart
- A user can view the current total in their cart

Instructions
- Use data structures to store your data
- Create render functions to work with the data
- Create action functions to update your data (for the Cart section)

Tips
- Use action functions with your Event Listeners, these will have names like addItemToCart and removeItemFromCart

Challenge 1
- Add filters to the store ie. filter by item type; when a user clicks a filter they will only see items of that type

Challenge 2
- Add sorting to the store ie. sort by price or sort alphabetically; when a user clicks sort they will see a sorted list of items



// PSEUDO CODE //

0. creating the data array with multiple objects inside
    -> keys {
        - id
        - name
        - img
        - price
    }

1. create the gateway bridges
    - #store 
    - .cart--item-list-container
    - .item-list
    - .total-section
    - .total-number (span) ? 

2. insert HTML through JS

    â€¢ create function renderStoreItem ()
    -> generate <li> elements containing the img src from the data
        + divEl.className = '.store--item-icon';
            - imgEl src & alt
        + buttonEl
    append to ulEL.className = '.store--item-list'


    â€¢ create function renderCartItemList ()
    -> generate <li> element containing the cart element
        + imgEl (class / src/ alt)
        + p (veggie's name)
        + buttonEl (2 classes)
        + span (2 classes)
        + button2El (3 classes)


   --->> > > to be continued
